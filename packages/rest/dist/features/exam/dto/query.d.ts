import { z } from 'zod';
export declare const GetExamsWhereInput: z.ZodObject<{
    name: z.ZodOptional<z.ZodString>;
    code: z.ZodOptional<z.ZodString>;
    isActive: z.ZodOptional<z.ZodBoolean>;
    isMockExam: z.ZodOptional<z.ZodBoolean>;
    isPremium: z.ZodOptional<z.ZodBoolean>;
    isComingSoon: z.ZodOptional<z.ZodBoolean>;
    examSubjectId: z.ZodOptional<z.ZodString>;
    examGroupId: z.ZodOptional<z.ZodString>;
    examEducationLevelId: z.ZodOptional<z.ZodString>;
    subjectName: z.ZodOptional<z.ZodString>;
    mode: z.ZodEnum<["PAPER_BASED", "COMPUTER_BASED"]>;
    lowerSublevelBound: z.ZodOptional<z.ZodNumber>;
    upperSublevelBound: z.ZodOptional<z.ZodNumber>;
    lowerExamineeDifficulty: z.ZodOptional<z.ZodNumber>;
    upperExamineeDifficulty: z.ZodOptional<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    mode: "PAPER_BASED" | "COMPUTER_BASED";
    name?: string | undefined;
    code?: string | undefined;
    isActive?: boolean | undefined;
    isMockExam?: boolean | undefined;
    isPremium?: boolean | undefined;
    isComingSoon?: boolean | undefined;
    examSubjectId?: string | undefined;
    examGroupId?: string | undefined;
    examEducationLevelId?: string | undefined;
    subjectName?: string | undefined;
    lowerSublevelBound?: number | undefined;
    upperSublevelBound?: number | undefined;
    lowerExamineeDifficulty?: number | undefined;
    upperExamineeDifficulty?: number | undefined;
}, {
    mode: "PAPER_BASED" | "COMPUTER_BASED";
    name?: string | undefined;
    code?: string | undefined;
    isActive?: boolean | undefined;
    isMockExam?: boolean | undefined;
    isPremium?: boolean | undefined;
    isComingSoon?: boolean | undefined;
    examSubjectId?: string | undefined;
    examGroupId?: string | undefined;
    examEducationLevelId?: string | undefined;
    subjectName?: string | undefined;
    lowerSublevelBound?: number | undefined;
    upperSublevelBound?: number | undefined;
    lowerExamineeDifficulty?: number | undefined;
    upperExamineeDifficulty?: number | undefined;
}>;
export type GetExamsWhereInput = z.infer<typeof GetExamsWhereInput>;
export declare const GetExamsOrderByInput: z.ZodObject<{
    createdAt: z.ZodOptional<z.ZodEnum<["asc", "desc"]>>;
    updatedAt: z.ZodOptional<z.ZodEnum<["asc", "desc"]>>;
    deletedAt: z.ZodOptional<z.ZodEnum<["asc", "desc"]>>;
    name: z.ZodOptional<z.ZodEnum<["asc", "desc"]>>;
    code: z.ZodOptional<z.ZodEnum<["asc", "desc"]>>;
    order: z.ZodOptional<z.ZodEnum<["asc", "desc"]>>;
    isActive: z.ZodOptional<z.ZodEnum<["asc", "desc"]>>;
    isMockExam: z.ZodOptional<z.ZodEnum<["asc", "desc"]>>;
    timeLimit: z.ZodOptional<z.ZodEnum<["asc", "desc"]>>;
    issueDate: z.ZodOptional<z.ZodEnum<["asc", "desc"]>>;
    announcementDate: z.ZodOptional<z.ZodEnum<["asc", "desc"]>>;
    isExamFileUploaded: z.ZodOptional<z.ZodEnum<["asc", "desc"]>>;
    isAnswerSheetUploaded: z.ZodOptional<z.ZodEnum<["asc", "desc"]>>;
    isDocumentUploaded: z.ZodOptional<z.ZodEnum<["asc", "desc"]>>;
    isPremium: z.ZodOptional<z.ZodEnum<["asc", "desc"]>>;
    isComingSoon: z.ZodOptional<z.ZodEnum<["asc", "desc"]>>;
    attemptLimit: z.ZodOptional<z.ZodEnum<["asc", "desc"]>>;
    lowerSublevelBound: z.ZodOptional<z.ZodEnum<["asc", "desc"]>>;
    upperSublevelBound: z.ZodOptional<z.ZodEnum<["asc", "desc"]>>;
    lowerExamineeDifficulty: z.ZodOptional<z.ZodEnum<["asc", "desc"]>>;
    upperExamineeDifficulty: z.ZodOptional<z.ZodEnum<["asc", "desc"]>>;
}, "strip", z.ZodTypeAny, {
    createdAt?: "asc" | "desc" | undefined;
    updatedAt?: "asc" | "desc" | undefined;
    deletedAt?: "asc" | "desc" | undefined;
    name?: "asc" | "desc" | undefined;
    code?: "asc" | "desc" | undefined;
    order?: "asc" | "desc" | undefined;
    isActive?: "asc" | "desc" | undefined;
    isMockExam?: "asc" | "desc" | undefined;
    timeLimit?: "asc" | "desc" | undefined;
    issueDate?: "asc" | "desc" | undefined;
    announcementDate?: "asc" | "desc" | undefined;
    isExamFileUploaded?: "asc" | "desc" | undefined;
    isAnswerSheetUploaded?: "asc" | "desc" | undefined;
    isDocumentUploaded?: "asc" | "desc" | undefined;
    isPremium?: "asc" | "desc" | undefined;
    isComingSoon?: "asc" | "desc" | undefined;
    attemptLimit?: "asc" | "desc" | undefined;
    lowerSublevelBound?: "asc" | "desc" | undefined;
    upperSublevelBound?: "asc" | "desc" | undefined;
    lowerExamineeDifficulty?: "asc" | "desc" | undefined;
    upperExamineeDifficulty?: "asc" | "desc" | undefined;
}, {
    createdAt?: "asc" | "desc" | undefined;
    updatedAt?: "asc" | "desc" | undefined;
    deletedAt?: "asc" | "desc" | undefined;
    name?: "asc" | "desc" | undefined;
    code?: "asc" | "desc" | undefined;
    order?: "asc" | "desc" | undefined;
    isActive?: "asc" | "desc" | undefined;
    isMockExam?: "asc" | "desc" | undefined;
    timeLimit?: "asc" | "desc" | undefined;
    issueDate?: "asc" | "desc" | undefined;
    announcementDate?: "asc" | "desc" | undefined;
    isExamFileUploaded?: "asc" | "desc" | undefined;
    isAnswerSheetUploaded?: "asc" | "desc" | undefined;
    isDocumentUploaded?: "asc" | "desc" | undefined;
    isPremium?: "asc" | "desc" | undefined;
    isComingSoon?: "asc" | "desc" | undefined;
    attemptLimit?: "asc" | "desc" | undefined;
    lowerSublevelBound?: "asc" | "desc" | undefined;
    upperSublevelBound?: "asc" | "desc" | undefined;
    lowerExamineeDifficulty?: "asc" | "desc" | undefined;
    upperExamineeDifficulty?: "asc" | "desc" | undefined;
}>;
export type GetExamsOrderByInput = z.infer<typeof GetExamsOrderByInput>;
export declare const GetExamsQueryParams: z.ZodObject<{
    where: z.ZodOptional<z.ZodObject<{
        name: z.ZodOptional<z.ZodString>;
        code: z.ZodOptional<z.ZodString>;
        isActive: z.ZodOptional<z.ZodBoolean>;
        isMockExam: z.ZodOptional<z.ZodBoolean>;
        isPremium: z.ZodOptional<z.ZodBoolean>;
        isComingSoon: z.ZodOptional<z.ZodBoolean>;
        examSubjectId: z.ZodOptional<z.ZodString>;
        examGroupId: z.ZodOptional<z.ZodString>;
        examEducationLevelId: z.ZodOptional<z.ZodString>;
        subjectName: z.ZodOptional<z.ZodString>;
        mode: z.ZodEnum<["PAPER_BASED", "COMPUTER_BASED"]>;
        lowerSublevelBound: z.ZodOptional<z.ZodNumber>;
        upperSublevelBound: z.ZodOptional<z.ZodNumber>;
        lowerExamineeDifficulty: z.ZodOptional<z.ZodNumber>;
        upperExamineeDifficulty: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        mode: "PAPER_BASED" | "COMPUTER_BASED";
        name?: string | undefined;
        code?: string | undefined;
        isActive?: boolean | undefined;
        isMockExam?: boolean | undefined;
        isPremium?: boolean | undefined;
        isComingSoon?: boolean | undefined;
        examSubjectId?: string | undefined;
        examGroupId?: string | undefined;
        examEducationLevelId?: string | undefined;
        subjectName?: string | undefined;
        lowerSublevelBound?: number | undefined;
        upperSublevelBound?: number | undefined;
        lowerExamineeDifficulty?: number | undefined;
        upperExamineeDifficulty?: number | undefined;
    }, {
        mode: "PAPER_BASED" | "COMPUTER_BASED";
        name?: string | undefined;
        code?: string | undefined;
        isActive?: boolean | undefined;
        isMockExam?: boolean | undefined;
        isPremium?: boolean | undefined;
        isComingSoon?: boolean | undefined;
        examSubjectId?: string | undefined;
        examGroupId?: string | undefined;
        examEducationLevelId?: string | undefined;
        subjectName?: string | undefined;
        lowerSublevelBound?: number | undefined;
        upperSublevelBound?: number | undefined;
        lowerExamineeDifficulty?: number | undefined;
        upperExamineeDifficulty?: number | undefined;
    }>>;
    orderBy: z.ZodOptional<z.ZodObject<{
        createdAt: z.ZodOptional<z.ZodEnum<["asc", "desc"]>>;
        updatedAt: z.ZodOptional<z.ZodEnum<["asc", "desc"]>>;
        deletedAt: z.ZodOptional<z.ZodEnum<["asc", "desc"]>>;
        name: z.ZodOptional<z.ZodEnum<["asc", "desc"]>>;
        code: z.ZodOptional<z.ZodEnum<["asc", "desc"]>>;
        order: z.ZodOptional<z.ZodEnum<["asc", "desc"]>>;
        isActive: z.ZodOptional<z.ZodEnum<["asc", "desc"]>>;
        isMockExam: z.ZodOptional<z.ZodEnum<["asc", "desc"]>>;
        timeLimit: z.ZodOptional<z.ZodEnum<["asc", "desc"]>>;
        issueDate: z.ZodOptional<z.ZodEnum<["asc", "desc"]>>;
        announcementDate: z.ZodOptional<z.ZodEnum<["asc", "desc"]>>;
        isExamFileUploaded: z.ZodOptional<z.ZodEnum<["asc", "desc"]>>;
        isAnswerSheetUploaded: z.ZodOptional<z.ZodEnum<["asc", "desc"]>>;
        isDocumentUploaded: z.ZodOptional<z.ZodEnum<["asc", "desc"]>>;
        isPremium: z.ZodOptional<z.ZodEnum<["asc", "desc"]>>;
        isComingSoon: z.ZodOptional<z.ZodEnum<["asc", "desc"]>>;
        attemptLimit: z.ZodOptional<z.ZodEnum<["asc", "desc"]>>;
        lowerSublevelBound: z.ZodOptional<z.ZodEnum<["asc", "desc"]>>;
        upperSublevelBound: z.ZodOptional<z.ZodEnum<["asc", "desc"]>>;
        lowerExamineeDifficulty: z.ZodOptional<z.ZodEnum<["asc", "desc"]>>;
        upperExamineeDifficulty: z.ZodOptional<z.ZodEnum<["asc", "desc"]>>;
    }, "strip", z.ZodTypeAny, {
        createdAt?: "asc" | "desc" | undefined;
        updatedAt?: "asc" | "desc" | undefined;
        deletedAt?: "asc" | "desc" | undefined;
        name?: "asc" | "desc" | undefined;
        code?: "asc" | "desc" | undefined;
        order?: "asc" | "desc" | undefined;
        isActive?: "asc" | "desc" | undefined;
        isMockExam?: "asc" | "desc" | undefined;
        timeLimit?: "asc" | "desc" | undefined;
        issueDate?: "asc" | "desc" | undefined;
        announcementDate?: "asc" | "desc" | undefined;
        isExamFileUploaded?: "asc" | "desc" | undefined;
        isAnswerSheetUploaded?: "asc" | "desc" | undefined;
        isDocumentUploaded?: "asc" | "desc" | undefined;
        isPremium?: "asc" | "desc" | undefined;
        isComingSoon?: "asc" | "desc" | undefined;
        attemptLimit?: "asc" | "desc" | undefined;
        lowerSublevelBound?: "asc" | "desc" | undefined;
        upperSublevelBound?: "asc" | "desc" | undefined;
        lowerExamineeDifficulty?: "asc" | "desc" | undefined;
        upperExamineeDifficulty?: "asc" | "desc" | undefined;
    }, {
        createdAt?: "asc" | "desc" | undefined;
        updatedAt?: "asc" | "desc" | undefined;
        deletedAt?: "asc" | "desc" | undefined;
        name?: "asc" | "desc" | undefined;
        code?: "asc" | "desc" | undefined;
        order?: "asc" | "desc" | undefined;
        isActive?: "asc" | "desc" | undefined;
        isMockExam?: "asc" | "desc" | undefined;
        timeLimit?: "asc" | "desc" | undefined;
        issueDate?: "asc" | "desc" | undefined;
        announcementDate?: "asc" | "desc" | undefined;
        isExamFileUploaded?: "asc" | "desc" | undefined;
        isAnswerSheetUploaded?: "asc" | "desc" | undefined;
        isDocumentUploaded?: "asc" | "desc" | undefined;
        isPremium?: "asc" | "desc" | undefined;
        isComingSoon?: "asc" | "desc" | undefined;
        attemptLimit?: "asc" | "desc" | undefined;
        lowerSublevelBound?: "asc" | "desc" | undefined;
        upperSublevelBound?: "asc" | "desc" | undefined;
        lowerExamineeDifficulty?: "asc" | "desc" | undefined;
        upperExamineeDifficulty?: "asc" | "desc" | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    where?: {
        mode: "PAPER_BASED" | "COMPUTER_BASED";
        name?: string | undefined;
        code?: string | undefined;
        isActive?: boolean | undefined;
        isMockExam?: boolean | undefined;
        isPremium?: boolean | undefined;
        isComingSoon?: boolean | undefined;
        examSubjectId?: string | undefined;
        examGroupId?: string | undefined;
        examEducationLevelId?: string | undefined;
        subjectName?: string | undefined;
        lowerSublevelBound?: number | undefined;
        upperSublevelBound?: number | undefined;
        lowerExamineeDifficulty?: number | undefined;
        upperExamineeDifficulty?: number | undefined;
    } | undefined;
    orderBy?: {
        createdAt?: "asc" | "desc" | undefined;
        updatedAt?: "asc" | "desc" | undefined;
        deletedAt?: "asc" | "desc" | undefined;
        name?: "asc" | "desc" | undefined;
        code?: "asc" | "desc" | undefined;
        order?: "asc" | "desc" | undefined;
        isActive?: "asc" | "desc" | undefined;
        isMockExam?: "asc" | "desc" | undefined;
        timeLimit?: "asc" | "desc" | undefined;
        issueDate?: "asc" | "desc" | undefined;
        announcementDate?: "asc" | "desc" | undefined;
        isExamFileUploaded?: "asc" | "desc" | undefined;
        isAnswerSheetUploaded?: "asc" | "desc" | undefined;
        isDocumentUploaded?: "asc" | "desc" | undefined;
        isPremium?: "asc" | "desc" | undefined;
        isComingSoon?: "asc" | "desc" | undefined;
        attemptLimit?: "asc" | "desc" | undefined;
        lowerSublevelBound?: "asc" | "desc" | undefined;
        upperSublevelBound?: "asc" | "desc" | undefined;
        lowerExamineeDifficulty?: "asc" | "desc" | undefined;
        upperExamineeDifficulty?: "asc" | "desc" | undefined;
    } | undefined;
}, {
    where?: {
        mode: "PAPER_BASED" | "COMPUTER_BASED";
        name?: string | undefined;
        code?: string | undefined;
        isActive?: boolean | undefined;
        isMockExam?: boolean | undefined;
        isPremium?: boolean | undefined;
        isComingSoon?: boolean | undefined;
        examSubjectId?: string | undefined;
        examGroupId?: string | undefined;
        examEducationLevelId?: string | undefined;
        subjectName?: string | undefined;
        lowerSublevelBound?: number | undefined;
        upperSublevelBound?: number | undefined;
        lowerExamineeDifficulty?: number | undefined;
        upperExamineeDifficulty?: number | undefined;
    } | undefined;
    orderBy?: {
        createdAt?: "asc" | "desc" | undefined;
        updatedAt?: "asc" | "desc" | undefined;
        deletedAt?: "asc" | "desc" | undefined;
        name?: "asc" | "desc" | undefined;
        code?: "asc" | "desc" | undefined;
        order?: "asc" | "desc" | undefined;
        isActive?: "asc" | "desc" | undefined;
        isMockExam?: "asc" | "desc" | undefined;
        timeLimit?: "asc" | "desc" | undefined;
        issueDate?: "asc" | "desc" | undefined;
        announcementDate?: "asc" | "desc" | undefined;
        isExamFileUploaded?: "asc" | "desc" | undefined;
        isAnswerSheetUploaded?: "asc" | "desc" | undefined;
        isDocumentUploaded?: "asc" | "desc" | undefined;
        isPremium?: "asc" | "desc" | undefined;
        isComingSoon?: "asc" | "desc" | undefined;
        attemptLimit?: "asc" | "desc" | undefined;
        lowerSublevelBound?: "asc" | "desc" | undefined;
        upperSublevelBound?: "asc" | "desc" | undefined;
        lowerExamineeDifficulty?: "asc" | "desc" | undefined;
        upperExamineeDifficulty?: "asc" | "desc" | undefined;
    } | undefined;
}>;
export type GetExamsQueryParams = z.infer<typeof GetExamsQueryParams>;
export declare const Exam: z.ZodObject<{
    id: z.ZodString;
    name: z.ZodString;
    examSubject: z.ZodObject<{
        id: z.ZodString;
        name: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
        name: string;
    }, {
        id: string;
        name: string;
    }>;
}, "strip", z.ZodTypeAny, {
    id: string;
    name: string;
    examSubject: {
        id: string;
        name: string;
    };
}, {
    id: string;
    name: string;
    examSubject: {
        id: string;
        name: string;
    };
}>;
export type Exam = z.infer<typeof Exam>;
export declare const GetExamsResponse: z.ZodArray<z.ZodObject<{
    id: z.ZodString;
    name: z.ZodString;
    examSubject: z.ZodObject<{
        id: z.ZodString;
        name: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
        name: string;
    }, {
        id: string;
        name: string;
    }>;
}, "strip", z.ZodTypeAny, {
    id: string;
    name: string;
    examSubject: {
        id: string;
        name: string;
    };
}, {
    id: string;
    name: string;
    examSubject: {
        id: string;
        name: string;
    };
}>, "many">;
export type GetExamsResponse = z.infer<typeof GetExamsResponse>;
//# sourceMappingURL=query.d.ts.map